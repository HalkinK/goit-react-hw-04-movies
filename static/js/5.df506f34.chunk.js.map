{"version":3,"sources":["services/moviesApi.js","components/MovieDetailsPage/MovieDetailsPage.js"],"names":["API_KEY","BASE_URL","fetchMovies","url","a","config","fetch","responce","ok","json","then","data","results","Promise","reject","Error","api","fetchMoviesTrend","page","trendMoviesUrl","fetchMoviesByQuery","searchQuery","searchQueryUrl","fetchMovieDetails","movieId","axios","get","response","fetchMovieCast","movie_id","castUrl","cast","fetchMovieReviews","reviewsUrl","Cast","lazy","Reviews","MovieDetailsPage","useParams","useRouteMatch","path","history","useHistory","location","useLocation","useState","poster_path","title","overview","vote_average","genres","id","movie","setMovie","isVisibleCast","setIsVisibleCast","isVisibleReviews","setIsVisibleReviews","useEffect","onClick","state","from","push","src","alt","map","genre","name","to","pathname","fallback"],"mappings":"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","file":"static/js/5.df506f34.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = \"612ad9e57f61526bfd55d457eca2466c\";\nconst BASE_URL = \"https://api.themoviedb.org/3\";\n\n// function fetchMovies(url) {\n//   const URL = url;\n\n//   return fetch(URL)\n//     .then((responce) => responce.json())\n//     .then((data) => data.results);\n// }\n\nexport function fetchMovieDetails(movieId) {\n  return axios\n    .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n    .then((response) => response.data);\n}\n\nasync function fetchMovies(url, config = {}) {\n  const responce = await fetch(url, config);\n\n  return responce.ok\n    ? await responce.json().then((data) => data.results)\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nfunction fetchMoviesTrend(page = 1) {\n  const trendMoviesUrl = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`;\n\n  return fetchMovies(trendMoviesUrl);\n}\n\nfunction fetchMoviesByQuery(searchQuery, page = 1) {\n  const searchQueryUrl = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${searchQuery}`;\n  return fetchMovies(searchQueryUrl);\n  // .responce.json()\n  // .then((data) => data.results);\n}\n\n// function fetchMovieDetails(movie_id) {\n//   const detailsUrl = `${BASE_URL}/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n//   return fetchMovies(detailsUrl);\n//   //   return fetch(detailsUrl).then((response) => response.data);\n// }\n\nfunction fetchMovieCast(movie_id) {\n  const castUrl = `${BASE_URL}/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`;\n  return fetch(castUrl)\n    .then((responce) => responce.json())\n    .then((data) => data.cast);\n}\n\nfunction fetchMovieReviews(movie_id, page = 1) {\n  const reviewsUrl = `${BASE_URL}/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=${page}`;\n  return fetchMovies(reviewsUrl);\n}\n\nconst api = {\n  fetchMoviesTrend,\n  fetchMoviesByQuery,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n\nexport default api;\n","import { useState, useEffect, lazy, Suspense } from \"react\";\nimport {\n  useParams,\n  Route,\n  NavLink,\n  useRouteMatch,\n  useHistory,\n  useLocation,\n} from \"react-router-dom\";\nimport api from \"../../services/moviesApi\";\n// import Cast from \"../Cast/Cast\";\n// import Reviews from \"../Reviews/Reviews\";\n\nconst Cast = lazy(() => import(\"../Cast/Cast\"));\nconst Reviews = lazy(() => import(\"../Reviews/Reviews\"));\n\nexport default function MovieDetailsPage() {\n  const imgUrl = \"https://image.tmdb.org/t/p/w500\";\n  const { movieId } = useParams();\n  const { url, path } = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  const [movie, setMovie] = useState({\n    poster_path: null,\n    title: null,\n    overview: null,\n    vote_average: null,\n    genres: null,\n    id: null,\n  });\n  const [isVisibleCast, setIsVisibleCast] = useState(false);\n  const [isVisibleReviews, setIsVisibleReviews] = useState(false);\n\n  useEffect(() => {\n    const renderMovieDetails = () => {\n      api\n        .fetchMovieDetails(movieId)\n        .then(({ poster_path, title, overview, vote_average, genres, id }) =>\n          setMovie({\n            poster_path,\n            title,\n            overview,\n            genres,\n            vote_average,\n            id,\n          })\n        );\n    };\n    renderMovieDetails();\n  }, [movieId]);\n\n  const makeVisibleCast = () => {\n    if (isVisibleReviews === true) {\n      setIsVisibleReviews(false);\n    }\n    setIsVisibleCast(true);\n  };\n\n  const makeVisibleReviews = () => {\n    if (isVisibleCast === true) {\n      setIsVisibleCast(false);\n    }\n\n    setIsVisibleReviews(true);\n  };\n\n  const goBack = () => {\n    if (location.state && location.state.from) {\n      return history.push(location.state.from);\n    }\n    history.push(\"/\");\n  };\n\n  return (\n    <>\n      <button onClick={goBack}>\n        <span>Go Back</span>\n      </button>\n      {movie && (\n        <>\n          <div>\n            <img src={`${imgUrl}${movie.poster_path}`} alt={movie.title} />\n            <div>\n              <h2>{movie.title}</h2>\n              <p>\n                User Score: <span>{movie.vote_average * 10}%</span>\n              </p>\n              <h3>Overview</h3>\n              Overview:<span>{movie.overview}</span>\n              <h4>Genres</h4>\n              <ul>\n                {movie.genres &&\n                  movie.genres.map((genre) => (\n                    <li key={genre.id}>{genre.name}</li>\n                  ))}\n              </ul>\n            </div>\n          </div>\n          <hr />\n          <span>Additional information</span>\n          <ul>\n            <li>\n              <NavLink\n                to={{\n                  pathname: `${url}/cast`,\n                }}\n                onClick={makeVisibleCast}\n              >\n                Cast\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                to={{\n                  pathname: `${url}/reviews`,\n                }}\n                onClick={makeVisibleReviews}\n              >\n                Reviews\n              </NavLink>\n            </li>\n          </ul>\n          <hr />\n          <Suspense fallback={<h1>Загружаем...</h1>}>\n            <Route path={`${path}/:cast`}>\n              {movie && isVisibleCast && <Cast />}\n            </Route>\n\n            <Route path={`${path}/:reviews`}>\n              {movie && isVisibleReviews && <Reviews />}\n            </Route>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}