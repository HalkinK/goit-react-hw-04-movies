{"version":3,"sources":["services/moviesApi.js","components/MoviesPage/MoviesPage.js"],"names":["API_KEY","BASE_URL","fetchMovies","url","a","config","fetch","responce","ok","json","then","data","results","Promise","reject","Error","api","fetchMoviesTrend","page","trendMoviesUrl","fetchMoviesByQuery","searchQuery","searchQueryUrl","fetchMovieDetails","movieId","axios","get","response","fetchMovieCast","movie_id","castUrl","cast","fetchMovieReviews","reviewsUrl","MoviesPage","useState","movies","setMovies","setSearchQuery","useRouteMatch","request","setRequest","location","useLocation","useEffect","className","onSubmit","event","preventDefault","type","autoComplete","autoFocus","placeholder","value","name","onChange","currentTarget","toLowerCase","map","title","id","to","pathname","state","from"],"mappings":"uLAEMA,EAAU,mCACVC,EAAW,+B,SAgBFC,E,8EAAf,WAA2BC,GAA3B,6BAAAC,EAAA,6DAAgCC,EAAhC,+BAAyC,GAAzC,SACyBC,MAAMH,EAAKE,GADpC,YACQE,EADR,QAGkBC,GAHlB,iCAIYD,EAASE,OAAOC,MAAK,SAACC,GAAD,OAAUA,EAAKC,WAJhD,gDAKMC,QAAQC,OAAO,IAAIC,MAAM,cAL/B,oF,sBAuCA,IAAMC,EAAM,CACVC,iBAhCF,WAAqC,IAAXC,EAAU,uDAAH,EACzBC,EAAc,UAAMlB,EAAN,uCAA6CD,EAA7C,gCAA4EkB,GAEhG,OAAOhB,EAAYiB,IA8BnBC,mBA3BF,SAA4BC,GAAwB,IAAXH,EAAU,uDAAH,EACxCI,EAAc,UAAMrB,EAAN,iCAAuCD,EAAvC,gCAAsEkB,EAAtE,kBAAoFG,GACxG,OAAOnB,EAAYoB,IA0BnBC,kBAhDK,SAA2BC,GAChC,OAAOC,IACJC,IADI,UACGzB,EADH,kBACqBuB,EADrB,oBACwCxB,EADxC,oBAEJU,MAAK,SAACiB,GAAD,OAAcA,EAAShB,SA8C/BiB,eAhBF,SAAwBC,GACtB,IAAMC,EAAO,UAAM7B,EAAN,kBAAwB4B,EAAxB,4BAAoD7B,EAApD,mBACb,OAAOM,MAAMwB,GACVpB,MAAK,SAACH,GAAD,OAAcA,EAASE,UAC5BC,MAAK,SAACC,GAAD,OAAUA,EAAKoB,SAavBC,kBAVF,SAA2BH,GAAqB,IAAXX,EAAU,uDAAH,EACpCe,EAAU,UAAMhC,EAAN,kBAAwB4B,EAAxB,4BAAoD7B,EAApD,gCAAmFkB,GACnG,OAAOhB,EAAY+B,KAWNjB,O,+HC9DA,SAASkB,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAsCF,mBAAS,IAA/C,mBAAOd,EAAP,KAAoBiB,EAApB,KACQnC,EAAQoC,cAARpC,IACR,EAA8BgC,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,cAqBjB,OAVAC,qBAAU,WACR,GAAoB,KAAhBvB,EAAJ,CAIEL,IAAII,mBAAmBoB,GAAS9B,KAAK2B,MAGtC,CAACG,IAGF,qCACE,uBAAMK,UAAU,aAAaC,SAjBZ,SAACC,GACpBA,EAAMC,iBACNP,EAAWpB,IAeT,UACE,uBACEwB,UAAU,mBACVI,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOhC,EACPiC,KAAM,cACNC,SA9BoB,SAACR,GAC3BT,EAAeS,EAAMS,cAAcH,MAAMI,kBA+BrC,wBAAQR,KAAK,SAASJ,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,yBAGHT,GACC,mCACE,6BACGA,EAAOsB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAK3D,EAAL,YAAYyD,GACpBG,MAAO,CACLC,KAAMtB,EAASoB,WAJrB,SAQE,6BAAcH,GAALC","file":"static/js/6.7f28b478.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = \"612ad9e57f61526bfd55d457eca2466c\";\nconst BASE_URL = \"https://api.themoviedb.org/3\";\n\n// function fetchMovies(url) {\n//   const URL = url;\n\n//   return fetch(URL)\n//     .then((responce) => responce.json())\n//     .then((data) => data.results);\n// }\n\nexport function fetchMovieDetails(movieId) {\n  return axios\n    .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n    .then((response) => response.data);\n}\n\nasync function fetchMovies(url, config = {}) {\n  const responce = await fetch(url, config);\n\n  return responce.ok\n    ? await responce.json().then((data) => data.results)\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nfunction fetchMoviesTrend(page = 1) {\n  const trendMoviesUrl = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`;\n\n  return fetchMovies(trendMoviesUrl);\n}\n\nfunction fetchMoviesByQuery(searchQuery, page = 1) {\n  const searchQueryUrl = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${searchQuery}`;\n  return fetchMovies(searchQueryUrl);\n  // .responce.json()\n  // .then((data) => data.results);\n}\n\n// function fetchMovieDetails(movie_id) {\n//   const detailsUrl = `${BASE_URL}/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n//   return fetchMovies(detailsUrl);\n//   //   return fetch(detailsUrl).then((response) => response.data);\n// }\n\nfunction fetchMovieCast(movie_id) {\n  const castUrl = `${BASE_URL}/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`;\n  return fetch(castUrl)\n    .then((responce) => responce.json())\n    .then((data) => data.cast);\n}\n\nfunction fetchMovieReviews(movie_id, page = 1) {\n  const reviewsUrl = `${BASE_URL}/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=${page}`;\n  return fetchMovies(reviewsUrl);\n}\n\nconst api = {\n  fetchMoviesTrend,\n  fetchMoviesByQuery,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n\nexport default api;\n","import { useState, useEffect } from \"react\";\nimport { NavLink, useLocation, useRouteMatch } from \"react-router-dom\";\nimport api from \"../../services/moviesApi\";\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { url } = useRouteMatch();\n  const [request, setRequest] = useState(\"\");\n  const location = useLocation();\n\n  const handleRequestChange = (event) => {\n    setSearchQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setRequest(searchQuery);\n  };\n\n  useEffect(() => {\n    if (searchQuery === \"\") {\n      return;\n    }\n    const renderMoviesByQuery = () => {\n      api.fetchMoviesByQuery(request).then(setMovies);\n    };\n    renderMoviesByQuery();\n  }, [request]);\n\n  return (\n    <>\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          value={searchQuery}\n          name={\"searchQuery\"}\n          onChange={handleRequestChange}\n        />\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n      </form>\n      {movies && (\n        <>\n          <ul>\n            {movies.map(({ title, id }) => (\n              <NavLink\n                to={{\n                  pathname: `${url}/${id}`,\n                  state: {\n                    from: location.pathname,\n                  },\n                }}\n              >\n                <li key={id}>{title}</li>\n              </NavLink>\n            ))}\n          </ul>\n        </>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}